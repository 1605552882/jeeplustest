/**
 * Copyright &copy; 2015-2020 <a href="http://www.jeeplus.org/">JeePlus</a> All rights reserved.
 */
package com.jeeplus.modules.sys.interceptor;

import java.io.PrintWriter;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.shiro.authc.AuthenticationException;
import org.springframework.core.NamedThreadLocal;
import org.springframework.web.servlet.HandlerInterceptor;
import org.springframework.web.servlet.ModelAndView;

import com.alibaba.fastjson.JSONObject;
import com.jeeplus.common.memory.MemoryDataManager;
import com.jeeplus.common.utils.DateUtils;
import com.jeeplus.core.service.BaseService;
import com.jeeplus.core.web.Servlets;
import com.jeeplus.modules.pri_number_head.entity.pri_number_head.PriNumberHead;
import com.jeeplus.modules.sys.entity.Role;
import com.jeeplus.modules.sys.entity.User;
import com.jeeplus.modules.sys.utils.LogUtils;
import com.jeeplus.modules.sys.utils.UserUtils;

/**
 * 日志拦截器
 * 
 * @author jeeplus
 * @version 2017-8-19
 */
public class LogInterceptor extends BaseService implements HandlerInterceptor {

	private static final ThreadLocal<Long> startTimeThreadLocal = new NamedThreadLocal<Long>("ThreadLocal StartTime");

	@Override
	public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)
			throws Exception {
		String reqinfo = request.getParameter("reqinfo");
		
		// 判断是否需要号码头判断
		if (reqinfo != null) {
			if (reqinfo.trim().contains("yes")) {
				// 获得号码进行判断
				String number = request.getParameter("number");
				// 调用方法对号码进行区域判断
				if (!(UserUtils.getIsNumberUser(number))) {
					Map<String, Object> ControJsonMap = new HashMap<String, Object>();
					ControJsonMap.put("codes", "10005");
					ControJsonMap.put("msg", "您没有该号码相关的区域权限");
					ControJsonMap.put("total", "");
					response.setCharacterEncoding("utf-8");
					PrintWriter out = response.getWriter();
					JSONObject json = new JSONObject();
					for (Entry<String, Object> map : ControJsonMap.entrySet()) {
						json.put(map.getKey(), map.getValue());
					}
					
					char[] buf = json.toString().toCharArray();
					if (buf.length > 0) {
						out.write(buf);// 发送
						out.flush();
						out.close();
						System.out.println("*******************数据发送到前台*******************");
						ControJsonMap.clear();
					}

					return false;
				}
			}
		}
		if (logger.isDebugEnabled()) {
			long beginTime = System.currentTimeMillis();// 1、开始时间
			startTimeThreadLocal.set(beginTime); // 线程绑定变量（该数据只有当前请求的线程可见）
			logger.debug("开始计时: {}  URI: {}", new SimpleDateFormat("hh:mm:ss.SSS").format(beginTime),
					request.getRequestURI());
		}
		return true;
	}

	@Override
	public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,
			ModelAndView modelAndView) throws Exception {
		if (modelAndView != null) {
			logger.info("ViewName: " + modelAndView.getViewName());
		}
	}

	@Override
	public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)
			throws Exception {

		// 保存日志
		LogUtils.saveLog(Servlets.getRequest(), handler, ex, "", "测试时十四时说", "", "", "", "", "", "");

		// 打印JVM信息。
		if (logger.isDebugEnabled()) {
			long beginTime = startTimeThreadLocal.get();// 得到线程绑定的局部变量（开始时间）
			long endTime = System.currentTimeMillis(); // 2、结束时间
			logger.debug("计时结束：{}  耗时：{}  URI: {}  最大内存: {}m  已分配内存: {}m  已分配内存中的剩余空间: {}m  最大可用内存: {}m",
					new SimpleDateFormat("hh:mm:ss.SSS").format(endTime), DateUtils.formatDateTime(endTime - beginTime),
					request.getRequestURI(), Runtime.getRuntime().maxMemory() / 1024 / 1024,
					Runtime.getRuntime().totalMemory() / 1024 / 1024, Runtime.getRuntime().freeMemory() / 1024 / 1024,
					(Runtime.getRuntime().maxMemory() - Runtime.getRuntime().totalMemory()
							+ Runtime.getRuntime().freeMemory()) / 1024 / 1024);
		}

	}

}
