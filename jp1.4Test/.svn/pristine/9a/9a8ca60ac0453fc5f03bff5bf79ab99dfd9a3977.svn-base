/**
 * Copyright &copy; 2015-2020 <a href="http://www.jeeplus.org/">JeePlus</a> All rights reserved.
 */
package com.jeeplus.modules.faultcategorystatistic.service;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.jeeplus.core.persistence.Page;
import com.jeeplus.core.service.CrudService;
import com.jeeplus.modules.faultcategorystatistic.entity.Faultcategorystatistic;
import com.jeeplus.modules.faultcategorystatistic.mapper.FaultcategorystatisticMapper;
import com.jeeplus.modules.sys.entity.DictValue;
import com.jeeplus.modules.sys.utils.DictUtils;

/**
 * 故障种类统计表Service
 * @author lxy
 * @version 2019-10-15
 */
@Service
@Transactional(readOnly = true)
public class FaultcategorystatisticService extends CrudService<FaultcategorystatisticMapper, Faultcategorystatistic> {
	@Autowired
	FaultcategorystatisticMapper faultcategorystatisticMapper;

	public Faultcategorystatistic get(String id) {
		return super.get(id);
	}
	
	public List<Faultcategorystatistic> findList(Faultcategorystatistic faultcategorystatistic) {
		return super.findList(faultcategorystatistic);
	}
	
	public Map<String, Object> findStatisticList(Faultcategorystatistic faultcategorystatistic) {
		Map<String,Object> result = new HashMap<String,Object>();
		
		//分类 指定的还是全部
		//获取五大申告种类
		List<String> fiveFaultcategory = new ArrayList<String>();
		List<DictValue> fiveFaultcategoryDict = DictUtils.getDictList("fiveFaultcategory");
		for (DictValue kv : fiveFaultcategoryDict) {
			fiveFaultcategory.add(kv.getValue());
		}
		List<String> faultcategoryList = new ArrayList<String>();
		String faultcategory = faultcategorystatistic.getFaultcategory();
		if(faultcategory!=null && !faultcategory.equals("")) {
			//逗号分割
			String[] split = faultcategory.split(",");
			for (String item : split) {
				if(!item.equals("")) {
					faultcategoryList.add(item);
				}
			}
		}else {
			//获取五大申告种类
			faultcategoryList.addAll(fiveFaultcategory);
		}
		result.put("faultcategoryList", faultcategoryList);
		
		//日期设置
		Date begin = faultcategorystatistic.getBeginCreateDate();//2019-09-03 00:00:00
		Date end = faultcategorystatistic.getEndCreateDate();//2019-09-06 23:59:59
		List<Date> dateList = null;
		String timeFlag = faultcategorystatistic.getTimeFlag();
		//如果是环比的话，不需要取出中间日期
		String contrastFlag = faultcategorystatistic.getContrastFlag();
		if("1".equals(contrastFlag)) {//环比：不能是同一天或者同一月
			dateList = new ArrayList<Date>();
			dateList.add(begin);
			Calendar temp = Calendar.getInstance();
			temp.setTime(end);
			temp.set(Calendar.HOUR_OF_DAY,0);
			temp.set(Calendar.MINUTE,0);
			temp.set(Calendar.SECOND,0);
			dateList.add(temp.getTime());
		}else {
			dateList = getDate(begin, end, timeFlag);
		}
		//X轴数组
		List<String> datefmt = new ArrayList<String>();
		SimpleDateFormat dateFormat = null;
		if("1".equals(timeFlag)) {
			dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			for(int j=0; j<dateList.size(); j++) {
				datefmt.add(dateFormat.format(dateList.get(j)));
			}
		}else if("2".equals(timeFlag)) {
			dateFormat = new SimpleDateFormat("yyyy-MM");
			for(int j=0; j<dateList.size(); j++) {
				datefmt.add(dateFormat.format(dateList.get(j)));
			}
		}
		result.put("datefmt", datefmt);
		
		//初始化Y轴数据
		int[][] data = null;
		int faultcategorySize = faultcategoryList.size();
		int dateSize = dateList.size();
		if(faultcategorySize>0 && dateSize>0) {
			data = new int[faultcategorySize][dateSize];
			for(int k=0; k<faultcategoryList.size(); k++) {
				for(int j=0; j<dateList.size(); j++) {
					data[k][j] = 0;
				}
			}
		}
		
		//准备查询
		//例如结束日期是2019-10，则查询时改为2019-10-31 23:59:59，即要拿出10月的数据
		if("2".equals(timeFlag)) {
			Calendar nextMonth = Calendar.getInstance();
			nextMonth.setTime(faultcategorystatistic.getEndCreateDate());
			nextMonth.add(Calendar.MONTH, 1);
			nextMonth.add(Calendar.SECOND, -1);
			faultcategorystatistic.setEndCreateDate(nextMonth.getTime());
		}
		//需要的申告种类和不需要的种类
		List<String> usefaultcategory = new ArrayList<String>();
		List<String> uselessfaultcategory = new ArrayList<String>();
		for (String item : faultcategoryList) {
			usefaultcategory.add(item);
		}
		if(usefaultcategory.contains("其他")) {
			uselessfaultcategory.addAll(fiveFaultcategory);
			usefaultcategory.remove("其他");
			uselessfaultcategory.remove("其他");
			faultcategorystatistic.setUselessfaultcategory(uselessfaultcategory);
		}
		faultcategorystatistic.setUsefaultcategory(usefaultcategory);
		faultcategorystatistic.setFaultcategory("");//不作为查询条件
		List<Faultcategorystatistic> list = faultcategorystatisticMapper.findStatisticList(faultcategorystatistic);
		
		//放数据
		for(int i=0; i<list.size(); i++) {//全部数据
			Faultcategorystatistic item = list.get(i);
			Date createDate = item.getCreateDate();
			String faultcategoryDB = item.getFaultcategory();
			int times = Integer.valueOf(item.getTimes());
			
			for(int j=0; j<dateList.size(); j++) {
				if("1".equals(timeFlag) && createDate.getTime()-dateList.get(j).getTime()>=0 && createDate.getTime()-dateList.get(j).getTime()<24*60*60*1000) {
					boolean isOther = true;
					for(int n=0; n<faultcategoryList.size() && isOther; n++) {
						if(faultcategoryDB.indexOf(faultcategoryList.get(n))!=-1) {
							//非其他
							data[n][j] += times;
							isOther = false;
						}
					}
					if(isOther) {//其他
						data[faultcategoryList.indexOf("其他")][j] += times;
					}
				}else if("2".equals(timeFlag)) {
					Calendar calCre = Calendar.getInstance();
					Calendar calLis = Calendar.getInstance();
					calCre.setTime(createDate);
					calLis.setTime(dateList.get(j));
					if(calCre.get(Calendar.YEAR)==calLis.get(Calendar.YEAR) && calCre.get(Calendar.MONTH)==calLis.get(Calendar.MONTH)) {

						boolean isOther = true;
						for(int n=0; n<faultcategoryList.size() && isOther; n++) {
							if(faultcategoryDB.indexOf(faultcategoryList.get(n))!=-1) {
								//非其他
								data[n][j] += times;
								isOther = false;
								break;
							}
						}
						if(isOther) {//其他
							data[faultcategoryList.indexOf("其他")][j] += times;
						}
					
					}
				}
			}
		}
		result.put("data", data);
		return result;
	}
	
	/**
	 * 日期分割
	 * @param begin
	 * @param end
	 * @param timeFlag
	 * @return
	 */
	public List<Date> getDate(Date begin, Date end, String timeFlag){

		List<Date> allDate = new ArrayList<Date>();

	    allDate.add(begin);
	    Calendar calBegin = Calendar.getInstance();
	    // 使用给定的 Date 设置此 Calendar 的时间
	    calBegin.setTime(begin);
	    Calendar calEnd = Calendar.getInstance();
	    // 使用给定的 Date 设置此 Calendar 的时间
	    calEnd.setTime(end);
	    calEnd.set(Calendar.HOUR_OF_DAY,0);
	    calEnd.set(Calendar.MINUTE,0);
	    calEnd.set(Calendar.SECOND,0);
	    end = calEnd.getTime();
	    // 此日期是否在指定日期之后
	    while (end.after(calBegin.getTime())) {
	        // 根据日历的规则，为给定的日历字段添加或减去指定的时间量
	        if("1".equals(timeFlag)) {//日
	        	calBegin.add(Calendar.DAY_OF_MONTH, 1);
	        }else if("2".equals(timeFlag)) {//月
	        	calBegin.add(Calendar.MONTH, 1);
	        }
	        allDate.add(calBegin.getTime());
	    }
	    return allDate;
	}	
	/**
	 * 所有分类
	 * @return
	 */
	public List<String> findFaultcategory() {
		return faultcategorystatisticMapper.findFaultcategorysResult();
	}

	public List<Faultcategorystatistic> findMonth(Faultcategorystatistic faultcategorystatistic) {
		return faultcategorystatisticMapper.findMonth(faultcategorystatistic);
	}

	/**
	 * 分类、地市对应次数
	 * @param faultcategorystatistic
	 * @return
	 */
	public List<Faultcategorystatistic> findCityData(Faultcategorystatistic faultcategorystatistic) {
		//例如结束日期是2019-10，则查询时改为2019-10-31 23:59:59，即要拿出10月的数据
		if("2".equals(faultcategorystatistic.getTimeFlag())) {
			Calendar nextMonth = Calendar.getInstance();
			nextMonth.setTime(faultcategorystatistic.getEndCreateDate());
			nextMonth.add(Calendar.MONTH, 1);
			nextMonth.add(Calendar.SECOND, -1);
			faultcategorystatistic.setEndCreateDate(nextMonth.getTime());
		}
		String faultcategory = faultcategorystatistic.getFaultcategory();
		//其他
		if("其他".equals(faultcategory)) {
			//获取五大申告种类
			List<String> fiveFaultcategory = new ArrayList<String>();
			List<DictValue> fiveFaultcategoryDict = DictUtils.getDictList("fiveFaultcategory");
			for (DictValue kv : fiveFaultcategoryDict) {
				fiveFaultcategory.add(kv.getValue());
			}
			fiveFaultcategory.remove("其他");
			faultcategorystatistic.setUselessfaultcategory(fiveFaultcategory);
			faultcategorystatistic.setFaultcategory("");//不作为查询条件
		}
		return faultcategorystatisticMapper.findCityData(faultcategorystatistic);
	}
}