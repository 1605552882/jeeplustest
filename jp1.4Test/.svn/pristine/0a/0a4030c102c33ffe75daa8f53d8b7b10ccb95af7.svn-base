/**
 * Copyright &copy; 2015-2020 <a href="http://www.jeeplus.org/">JeePlus</a> All rights reserved.
 */
package com.jeeplus.modules.documentdetect.service;

import java.util.Calendar;
import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.jeeplus.core.persistence.Page;
import com.jeeplus.core.service.CrudService;
import com.jeeplus.common.utils.StringUtils;
import com.jeeplus.modules.documentdetect.entity.Documentarydetails;
import com.jeeplus.modules.documentdetect.mapper.DocumentarydetailsMapper;
import com.jeeplus.modules.documentdetect.entity.Feedback;
import com.jeeplus.modules.documentdetect.mapper.FeedbackMapper;

/**
 * 工单详情Service
 * @author liang
 * @version 2019-08-05
 */
@Service
@Transactional(readOnly = true)
public class DocumentarydetailsService extends CrudService<DocumentarydetailsMapper, Documentarydetails> {

	@Autowired
	private FeedbackMapper feedbackMapper;
	
	@Autowired
	private DocumentarydetailsMapper documentarydetailsMapper;
	
	public List<Feedback> getFeedbackList(Documentarydetails documentarydetails) {
		List<Feedback> list = feedbackMapper.findList(new Feedback(documentarydetails));
		return list;
	}
	
	
	public Documentarydetails getIdBySbillno(String sbillno) {
		Documentarydetails documentarydetails = documentarydetailsMapper.getIdBySbillno(sbillno);
		return documentarydetails;
	}
	
	public Documentarydetails get(String id) {
		Documentarydetails documentarydetails = super.get(id);
		documentarydetails.setFeedbackList(feedbackMapper.findList(new Feedback(documentarydetails)));
		//获取前十天日期
		Date end = documentarydetails.getReportTime();
		Calendar ca = Calendar.getInstance();
		ca.setTime(end);
		ca.add(Calendar.DAY_OF_MONTH, -10);  //设置为前1天
		Date start = ca.getTime();   //得到前1天的
		Documentarydetails repetitiveDocument = new Documentarydetails();
		//获取去掉尾部-的单号
		String billno = documentarydetails.getSbillno();
		String sb = billno.substring(0, billno.lastIndexOf("-"));
		repetitiveDocument.setSbillno(sb);
		repetitiveDocument.setBeginReportTime(start);
		repetitiveDocument.setEndReportTime(end);
		documentarydetails.setRepetitiveDocument(documentarydetailsMapper.getRepetitiveBySbillno(repetitiveDocument));
		return documentarydetails;
	}
	
	public List<Documentarydetails> findList(Documentarydetails documentarydetails) {
		return super.findList(documentarydetails);
	}
	
	public Page<Documentarydetails> findPage(Page<Documentarydetails> page, Documentarydetails documentarydetails) {
		return super.findPage(page, documentarydetails);
	}
	
	@Transactional(readOnly = false)
	public void save(Documentarydetails documentarydetails) {
		super.save(documentarydetails);
		for (Feedback feedback : documentarydetails.getFeedbackList()){
			if (feedback.getId() == null){
				continue;
			}
			if (Feedback.DEL_FLAG_NORMAL.equals(feedback.getDelFlag())){
				if (StringUtils.isBlank(feedback.getId())){
					feedback.setDocumentarydetails(documentarydetails);
					feedback.preInsert();
					feedbackMapper.insert(feedback);
				}else{
					feedback.preUpdate();
					feedbackMapper.update(feedback);
				}
			}else{
				feedbackMapper.delete(feedback);
			}
		}
	}
	
	@Transactional(readOnly = false)
	public void delete(Documentarydetails documentarydetails) {
		super.delete(documentarydetails);
		feedbackMapper.delete(new Feedback(documentarydetails));
	}
	
}