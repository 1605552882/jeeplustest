/**
 * Copyright &copy; 2015-2020 <a href="http://www.jeeplus.org/">JeePlus</a> All rights reserved.
 */
package com.jeeplus.modules.documentchoose.web;

import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.ConstraintViolationException;

import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.google.common.collect.Lists;
import com.jeeplus.common.config.Global;
import com.jeeplus.common.json.AjaxJson;
import com.jeeplus.common.utils.DateUtils;
import com.jeeplus.common.utils.StringUtils;
import com.jeeplus.common.utils.excel.ExportExcel;
import com.jeeplus.common.utils.excel.ImportExcel;
import com.jeeplus.core.persistence.Page;
import com.jeeplus.core.web.BaseController;
import com.jeeplus.modules.checkresult.entity.Checkresult;
import com.jeeplus.modules.checkresult.service.CheckresultService;
import com.jeeplus.modules.documentchoose.entity.Documentchouse;
import com.jeeplus.modules.documentchoose.service.DocumentchouseService;
import com.jeeplus.modules.documentdetect.entity.Documentarydetails;
import com.jeeplus.modules.documentdetect.entity.Feedback;
import com.jeeplus.modules.documentdetect.service.DocumentarydetailsService;
import com.jeeplus.modules.errordocument.entity.Errordocument;
import com.jeeplus.modules.errordocument.service.ErrordocumentService;
import com.jeeplus.modules.groupdetails.service.GroupdetailsService;
import com.jeeplus.modules.overtimedocument.entity.Overtimedocument;
import com.jeeplus.modules.overtimedocument.service.OvertimedocumentService;
import com.jeeplus.modules.overtimefeedback.entity.Overtimefeedback;
import com.jeeplus.modules.overtimefeedback.service.OvertimefeedbackService;
import com.jeeplus.modules.overtimesign.entity.Overtimesigning;
import com.jeeplus.modules.overtimesign.service.OvertimesigningService;
import com.jeeplus.modules.repetitivedocument.entity.Repetitivedocument;
import com.jeeplus.modules.repetitivedocument.service.RepetitivedocumentService;

/**
 * 工单抽取Controller
 * @author lxy
 * @version 2019-08-14
 */
@Controller
@RequestMapping(value = "${adminPath}/documentchoose/documentchouse")
public class DocumentchouseController extends BaseController {

	@Autowired
	private DocumentchouseService documentchouseService;
	
	@Autowired
	private DocumentarydetailsService documentarydetailsService;
	
	@Autowired
	private OvertimedocumentService overtimedocumentService;
	
	@Autowired
	private OvertimesigningService overtimesigningService;
	
	@Autowired
	private RepetitivedocumentService repetitivedocumentService;
	
	@Autowired
	private ErrordocumentService errordocumentService;
	
	@Autowired
	private OvertimefeedbackService overtimefeedbackService;
	
	@Autowired
	private CheckresultService checkresultService;
	
	@Autowired
	private GroupdetailsService groupdetailsService;
	
	
	
	
	
	@ModelAttribute
	public Documentchouse get(@RequestParam(required=false) String id) {
		Documentchouse entity = null;
		if (StringUtils.isNotBlank(id)){
			entity = documentchouseService.get(id);
		}
		if (entity == null){
			entity = new Documentchouse();
		}
		return entity;
	}
	
	/**
	 * 工单抽取列表页面
	 */
	//@RequiresPermissions("documentchoose:documentchouse:list")
	@RequestMapping(value = {"list", ""})
	public String list() {
		return "modules/documentchoose/documentchouseList";
	}
	
		/**
	 * 工单抽取列表数据
	 */
	@SuppressWarnings("unused")
	@ResponseBody
	//@RequiresPermissions("documentchoose:documentchouse:list")
	@RequestMapping(value = "data")
	public Map<String, Object> data(Documentchouse documentchouse, HttpServletRequest request, HttpServletResponse response, Model model) {
		List<Documentchouse> list = new ArrayList<Documentchouse>();
		List<Documentchouse> documentchouses = new ArrayList<Documentchouse>();
		//抽取比例
		String proportion = documentchouse.getSbillno();
		//开始时间
		Date begin = documentchouse.getBeginReportTime();
		//结束时间
		Date end = documentchouse.getEndReportTime();
		//关键词
		String key = documentchouse.getKey();
		//业务类型
		String busytype  = documentchouse.getBusytype();
		//责任人
		String people = documentchouse.getPeople();
		//关键词匹配 故障内容
		if(!"".equals(key) && key != null ) {
			Documentarydetails documentarydetails = new Documentarydetails();
			documentarydetails.setSrepfaultdetail(key);
			documentarydetails.setBeginReportTime(begin);
			documentarydetails.setEndReportTime(end);
			for (Iterator<Documentarydetails> iterator = documentarydetailsService.findList(documentarydetails).iterator(); iterator.hasNext();) {
				Documentarydetails documentarydetails2 = iterator.next();
				Documentchouse choose = new Documentchouse();
				choose.setSbillno(documentarydetails2.getSbillno());
				choose.setReportTime(documentarydetails2.getReportTime());
				//判断是否检查
				List<Checkresult> checkresult = checkresultService.getBySbillno(choose.getSbillno());
				if (checkresult.size() != 0) {
					choose.setRemarks("已检查");
				} else {
					choose.setRemarks("未检查");
				}
				documentchouses.add(choose);
			}
		// 业务类型匹配 故障种类	
		} else if (!"".equals(busytype) && busytype != null) {
			Documentarydetails documentarydetails = new Documentarydetails();
			documentarydetails.setSfaultcategory(busytype);
			documentarydetails.setBeginReportTime(begin);
			documentarydetails.setEndReportTime(end);
			for (Iterator<Documentarydetails> iterator = documentarydetailsService.findList(documentarydetails).iterator(); iterator.hasNext();) {
				Documentarydetails documentarydetails2 = iterator.next();
				Documentchouse choose = new Documentchouse();
				choose.setSbillno(documentarydetails2.getSbillno());
				choose.setReportTime(documentarydetails2.getReportTime());
				//判断是否检查
				List<Checkresult> checkresult = checkresultService.getBySbillno(choose.getSbillno());
				if (checkresult.size() != 0) {
					choose.setRemarks("已检查");
				} else {
					choose.setRemarks("未检查");
				}
				documentchouses.add(choose);
			}
		//责任人 匹配 结单信息  反馈内容的工号匹配	如#180
		} else if (!"".equals(people) && people != null) {
			Documentarydetails documentarydetails = new Documentarydetails();
			documentarydetails.setBeginReportTime(begin);
			documentarydetails.setEndReportTime(end);
			for (Iterator<Documentarydetails> iterator = documentarydetailsService.findList(documentarydetails).iterator(); iterator.hasNext();) {
				Documentarydetails documentarydetails2 = iterator.next();
				//判断是否存在该责任人  结单信息
				if ( documentarydetails2.getSprocesssummary().contains(people) ) {
					//包含
					Documentchouse choose = new Documentchouse();
					choose.setSbillno(documentarydetails2.getSbillno());
					choose.setReportTime(documentarydetails2.getReportTime());
					//判断是否检查
					List<Checkresult> checkresult = checkresultService.getBySbillno(choose.getSbillno());
					if (checkresult.size() != 0) {
						choose.setRemarks("已检查");
					} else {
						choose.setRemarks("未检查");
					}
					documentchouses.add(choose);
				} else {//不包含
					//判断结单信息是否有该责任人
					List<Feedback> feebackList = documentarydetailsService.getFeedbackList(documentarydetails2);
					for (Feedback feedback : feebackList) {
						if ( feedback.getSprocdesc().contains(people) ) {
							//包含
							Documentchouse choose = new Documentchouse();
							choose.setSbillno(documentarydetails2.getSbillno());
							choose.setReportTime(documentarydetails2.getReportTime());
							//判断是否检查
							List<Checkresult>  checkresult = checkresultService.getBySbillno(choose.getSbillno());
							if (checkresult.size() != 0) {
								choose.setRemarks("已检查");
							} else {
								choose.setRemarks("未检查");
							}
							documentchouses.add(choose);
						}
					}
					
				}
			}
			
			
		} else if (!"".equals(proportion) && proportion != null) {
			//获取超时的工单
			Overtimedocument overtimedocument = new Overtimedocument();
			overtimedocument.setBeginReportTime(begin);
			overtimedocument.setEndReportTime(end);
			List<Overtimedocument> overtimedocumentLlist = overtimedocumentService.findList(overtimedocument);
			//抽取比例
			int a = (overtimedocumentLlist.size()*Integer.parseInt(proportion))/100;
			if (overtimedocumentLlist.size() != 0 && a == 0) {
				a=1;
			}
			for (int i = 0; i < a; i++) {
				Documentchouse document = new Documentchouse();
				document.setReportTime(overtimedocumentLlist.get(i).getReportTime());
				document.setSbillno(overtimedocumentLlist.get(i).getSbillno());
				document.setResult(overtimedocumentLlist.get(i).getOvertime());
				//判断是否检查
				List<Checkresult>  checkresult = checkresultService.getBySbillno(overtimedocumentLlist.get(i).getSbillno());
				if (checkresult.size() != 0) {
					document.setRemarks("已检查");
				} else {
					document.setRemarks("未检查");
				}
				documentchouses.add(document);
			}
			
			
			//获取签单超时
			Overtimesigning Overtimesigning = new Overtimesigning();
			Overtimesigning.setBeginReportTime(begin);
			Overtimesigning.setEndReportTime(end);
			List<Overtimesigning> overtimesigningLlist = overtimesigningService.findList(Overtimesigning);
			//100%抽取
			for (int i = 0; i < overtimesigningLlist.size(); i++) {
				Documentchouse document = new Documentchouse();
				document.setReportTime(overtimesigningLlist.get(i).getReportTime());
				document.setSbillno(overtimesigningLlist.get(i).getSbillno());
				document.setResult(overtimesigningLlist.get(i).getOvertimesigin());
				//判断是否检查
				List<Checkresult>  checkresult = checkresultService.getBySbillno(overtimesigningLlist.get(i).getSbillno());
				if (checkresult.size() != 0) {
					document.setRemarks("已检查");
				} else {
					document.setRemarks("未检查");
				}
				documentchouses.add(document);
			}
					
			//获取重复退单
			Repetitivedocument repetitiveDocument = new Repetitivedocument();
			repetitiveDocument.setBeginReportTime(begin);
			repetitiveDocument.setEndReportTime(end);
			List<Repetitivedocument> repetitivedocumentLlist = repetitivedocumentService.findList(repetitiveDocument);
			//抽取比例
			int c = (repetitivedocumentLlist.size()*Integer.parseInt(proportion))/100;
			if (repetitivedocumentLlist.size() != 0 && c == 0) {
				c=1;
			}
			for (int i = 0; i < c; i++) {
				Documentchouse document = new Documentchouse();
				document.setReportTime(repetitivedocumentLlist.get(i).getReportTime());
				document.setSbillno(repetitivedocumentLlist.get(i).getSbillno());
				document.setResult("重复退单");
				List<Checkresult>  checkresult = checkresultService.getBySbillno(repetitivedocumentLlist.get(i).getSbillno());
				if (checkresult.size() != 0) {
					document.setRemarks("已检查");
				} else {
					document.setRemarks("未检查");
				}
				documentchouses.add(document);
			}
					
			//异常工单
			Errordocument errordocument = new Errordocument();
			errordocument.setBeginReportTime(begin);
			errordocument.setEndReportTime(end);
			List<Errordocument> errordocumentLlist = errordocumentService.findList(errordocument);
			//抽取比例
			int d = (errordocumentLlist.size()*Integer.parseInt(proportion))/100;
			if (errordocumentLlist.size() != 0 && d == 0) {
				d=1;
			}
			for (int i = 0; i < d; i++) {
				Documentchouse document = new Documentchouse();
				document.setReportTime(errordocumentLlist.get(i).getReportTime());
				document.setSbillno(errordocumentLlist.get(i).getSbillno());
				document.setResult(errordocumentLlist.get(i).getCheckresult());
				List<Checkresult>  checkresult = checkresultService.getBySbillno(errordocumentLlist.get(i).getSbillno());
				if (checkresult.size() != 0) {
					document.setRemarks("已检查");
				} else {
					document.setRemarks("未检查");
				}
				documentchouses.add(document);
			}
					
			//反馈超时
			Overtimefeedback overtimefeedback = new Overtimefeedback();
			overtimefeedback.setBeginReportTime(begin);
			overtimefeedback.setEndReportTime(end);
			List<Overtimefeedback> overtimefeedbackLlist = overtimefeedbackService.findList(overtimefeedback);
			//抽取比例
			int e = (overtimefeedbackLlist.size() * Integer.parseInt(proportion)) / 100;
			if (overtimefeedbackLlist.size() != 0 && e == 0) {
				e=1;
			}
			for (int i = 0; i < e; i++) {
				Documentchouse document = new Documentchouse();
				document.setReportTime(overtimefeedbackLlist.get(i).getReportTime());
				document.setSbillno(overtimefeedbackLlist.get(i).getSbillno());
				document.setResult(overtimefeedbackLlist.get(i).getFeedback());
				
				List<Checkresult>  checkresult = checkresultService.getBySbillno(overtimefeedbackLlist.get(i).getSbillno());
				if (checkresult.size() != 0) {
					document.setRemarks("已检查");
				} else {
					document.setRemarks("未检查");
				}
				documentchouses.add(document);
			}
			
		}
		Page<Documentchouse> page = new Page<Documentchouse>(request, response);
		page.setList(documentchouses);
		page.setCount(documentchouses.size());
		return getBootstrapData(page);
	}

	/**
	 * 查看，增加，编辑工单抽取表单页面
	 */
	//@RequiresPermissions(value={"documentchoose:documentchouse:view","documentchoose:documentchouse:add","documentchoose:documentchouse:edit"},logical=Logical.OR)
	@RequestMapping(value = "form")
	public String form(Documentchouse documentchouse, Model model) {
		model.addAttribute("documentchouse", documentchouse);
		if(StringUtils.isBlank(documentchouse.getId())){//如果ID是空为添加
			model.addAttribute("isAdd", true);
		}
		return "modules/documentchoose/documentchouseForm";
	}

	/**
	 * 保存工单抽取
	 */
	
	@SuppressWarnings("unused")
	//@RequiresPermissions(value={"documentchoose:documentchouse:add","documentchoose:documentchouse:edit"},logical=Logical.OR)
	@ResponseBody
	@RequestMapping(value = "save")
	public AjaxJson save(Documentarydetails documentarydetails, Model model, RedirectAttributes redirectAttributes) throws Exception{
		AjaxJson j = new AjaxJson();
		String people = documentarydetails.getPeople();//责任人
		String group = documentarydetails.getGroup();//责任班组
		List<Checkresult>  check =  checkresultService.getBySbillno(documentarydetails.getSbillno());
		if (check.size() == 0) {
			//无责任人
			if (people == null || "".equals(people.trim())) {
				if (group != null && !"".equals(group.trim())) {
					Checkresult checkresult = new Checkresult();
					checkresult.setSbillno(documentarydetails.getSbillno());//'单据编号',
					checkresult.setHasproblem(documentarydetails.getProblem());//存在问题
					checkresult.setDetails(documentarydetails.getDetails());//详细情况
					checkresult.setDutyGroup(group);//责任班组
					checkresult.setDcreatetime(new Date());//创建时间
					//保存
					checkresultService.save(checkresult);
					j.setSuccess(true);
					j.setMsg("保存成功");
				} else {
					j.setSuccess(false);
					j.setMsg("请填写班组信息");
				}
			} else { //存在责任人
				String[] peoples = people.split(",");
				for (int i = 0; i < peoples.length; i++) {
					if ( !"".equals(peoples[i].trim()) && peoples[i] != null) {
						Checkresult checkresult = new Checkresult();
						checkresult.setSbillno(documentarydetails.getSbillno());//'单据编号',
						checkresult.setHasproblem(documentarydetails.getProblem());//存在问题
						checkresult.setDetails(documentarydetails.getDetails());//详细情况
						checkresult.setDutyGroup(groupdetailsService.getbyName(peoples[i]).getGGroup());//责任班组
						checkresult.setDutyPeople(peoples[i]);;//责任人
						checkresult.setDcreatetime(new Date());//创建时间
						//保存
						checkresultService.save(checkresult);
						
					}
				}
				j.setSuccess(true);
				j.setMsg("保存成功");
			}
		} else {
			j.setSuccess(true);
			j.setMsg("请勿重复提交");
		}
		 
		return j;
	}
	
		
	/**
	 * 导出excel文件
	 */
	@ResponseBody
	@RequiresPermissions("documentchoose:documentchouse:export")
    @RequestMapping(value = "export", method=RequestMethod.POST)
    public AjaxJson exportFile(Documentchouse documentchouse, HttpServletRequest request, HttpServletResponse response, RedirectAttributes redirectAttributes) {
		AjaxJson j = new AjaxJson();
		try {
            String fileName = "工单抽取"+DateUtils.getDate("yyyyMMddHHmmss")+".xlsx";
            Page<Documentchouse> page = documentchouseService.findPage(new Page<Documentchouse>(request, response, -1), documentchouse);
    		new ExportExcel("工单抽取", Documentchouse.class).setDataList(page.getList()).write(response, fileName).dispose();
    		j.setSuccess(true);
    		j.setMsg("导出成功！");
    		return j;
		} catch (Exception e) {
			j.setSuccess(false);
			j.setMsg("导出工单抽取记录失败！失败信息："+e.getMessage());
		}
			return j;
    }

}