/**
 * Copyright &copy; 2015-2020 <a href="http://www.jeeplus.org/">JeePlus</a> All rights reserved.
 */
package com.jeeplus.modules.faultcategorystatistic.service;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.jeeplus.core.persistence.Page;
import com.jeeplus.core.service.CrudService;
import com.jeeplus.modules.faultcategorystatistic.entity.Faultcategorystatistic;
import com.jeeplus.modules.faultcategorystatistic.mapper.FaultcategorystatisticMapper;

/**
 * 故障种类统计表Service
 * @author lxy
 * @version 2019-10-15
 */
@Service
@Transactional(readOnly = true)
public class FaultcategorystatisticService extends CrudService<FaultcategorystatisticMapper, Faultcategorystatistic> {
	@Autowired
	FaultcategorystatisticMapper faultcategorystatisticMapper;

	public Faultcategorystatistic get(String id) {
		return super.get(id);
	}
	
	public List<Faultcategorystatistic> findList(Faultcategorystatistic faultcategorystatistic) {
		return super.findList(faultcategorystatistic);
	}
	
	public Map<String, Object> findStatisticList(Faultcategorystatistic faultcategorystatistic) {
		Map<String,Object> result = new HashMap<String,Object>();
		//最大故障种类数
		int maxFaultCategory = 8;
		//分类 全部还是指定的
		List<String> faultcategoryList = new ArrayList<String>();
		if(faultcategorystatistic.getFaultcategory()!=null && !faultcategorystatistic.getFaultcategory().equals("")) {
			faultcategoryList.add(faultcategorystatistic.getFaultcategory());
		}else {
			//获取分组数据 [{彩信，3}，{短信，5}]
			List<Faultcategorystatistic> groupList = faultcategorystatisticMapper.findGroupList(faultcategorystatistic);
			//取前maxFaultCategory个，后面的整合成其它的
			for(int i=0; i<groupList.size() && i<maxFaultCategory; i++) {
				faultcategoryList.add(groupList.get(i).getFaultcategory());
			}
			if(groupList.size()>maxFaultCategory) {
				faultcategoryList.add("其它");
			}
		}
		result.put("faultcategoryList", faultcategoryList);
		
		Date begin = faultcategorystatistic.getBeginCreateDate();//2019-09-03 00:00:00
		Date end = faultcategorystatistic.getEndCreateDate();//2019-09-06 23:59:59
		String timeFlag = faultcategorystatistic.getTimeFlag();
		//间隔天数/月数
		List<Date> dateList = getDate(begin, end, timeFlag);
		List<String> datefmt = new ArrayList<String>();
		SimpleDateFormat dateFormat = null;
		if("1".equals(timeFlag)) {
			dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			for(int j=0; j<dateList.size(); j++) {
				datefmt.add(dateFormat.format(dateList.get(j)));
			}
		}else if("2".equals(timeFlag)) {
			dateFormat = new SimpleDateFormat("yyyy-MM");
			for(int j=0; j<dateList.size(); j++) {
				datefmt.add(dateFormat.format(dateList.get(j)));
			}
		}
		result.put("datefmt", datefmt);
		
		//初始化
		int[][] data = null;
		int faultcategorySize = dateList.size();
		int dateSize = dateList.size();
		if(faultcategorySize>0 && dateSize>0) {
			data = new int[faultcategoryList.size()][dateList.size()];
			for(int k=0; k<faultcategoryList.size(); k++) {
				for(int j=0; j<dateList.size(); j++) {
					data[k][j] = 0;
				}
			}
		}
		
		//例如结束日期是2019-10，则查询时改为2019-10-31 23:59:59，即要拿出10月的数据
		if("2".equals(timeFlag)) {
			Calendar nextMonth = Calendar.getInstance();
			nextMonth.setTime(faultcategorystatistic.getEndCreateDate());
			nextMonth.add(Calendar.MONTH, 1);
			nextMonth.add(Calendar.SECOND, -1);
			faultcategorystatistic.setEndCreateDate(nextMonth.getTime());
		}
		List<Faultcategorystatistic> list = findList(faultcategorystatistic);
		//放数据
		for(int i=0; i<list.size(); i++) {//全部数据
			Faultcategorystatistic item = list.get(i);
			Date createDate = item.getCreateDate();
			String faultcategory = item.getFaultcategory();
			int times = Integer.valueOf(item.getTimes());
			for(int j=0; j<dateList.size(); j++) {
				if("1".equals(timeFlag) && createDate.getTime()-dateList.get(j).getTime()>=0 && createDate.getTime()-dateList.get(j).getTime()<24*60*60*1000) {
					//其它
					if(faultcategoryList.indexOf(faultcategory)==-1) {
						data[maxFaultCategory][j] += times;
					}else {//非其它
						data[faultcategoryList.indexOf(faultcategory)][j] += times;
					}
				}else if("2".equals(timeFlag)) {
					Calendar calCre = Calendar.getInstance();
					Calendar calLis = Calendar.getInstance();
					calCre.setTime(createDate);
					calLis.setTime(dateList.get(j));
					if(calCre.get(Calendar.YEAR)==calLis.get(Calendar.YEAR) && calCre.get(Calendar.MONTH)==calLis.get(Calendar.MONTH)) {
						//其它
						if(faultcategoryList.indexOf(faultcategory)==-1) {
							data[maxFaultCategory][j] += times;
						}else {//非其它
							data[faultcategoryList.indexOf(faultcategory)][j] += times;
						}
					}
				}
			}
		}
		result.put("data", data);
		return result;
	}
	
	/**
	 * 日期分割
	 * @param begin
	 * @param end
	 * @param timeFlag
	 * @return
	 */
	public List<Date> getDate(Date begin, Date end, String timeFlag){

		List<Date> allDate = new ArrayList<Date>();

	    allDate.add(begin);
	    Calendar calBegin = Calendar.getInstance();
	    // 使用给定的 Date 设置此 Calendar 的时间
	    calBegin.setTime(begin);
	    Calendar calEnd = Calendar.getInstance();
	    // 使用给定的 Date 设置此 Calendar 的时间
	    calEnd.setTime(end);
	    // 此日期是否在指定日期之后
	    while (end.after(calBegin.getTime())) {
	        // 根据日历的规则，为给定的日历字段添加或减去指定的时间量
	        if("1".equals(timeFlag)) {//日
	        	calBegin.add(Calendar.DAY_OF_MONTH, 1);
	        }else if("2".equals(timeFlag)) {//月
	        	calBegin.add(Calendar.MONTH, 1);
	        }
	        allDate.add(calBegin.getTime());
	    }
	    return allDate;
	}	
	/**
	 * 所有分类
	 * @return
	 */
	public List<String> findFaultcategory() {
		return faultcategorystatisticMapper.findFaultcategorysResult();
	}

	public List<Faultcategorystatistic> findMonth(Faultcategorystatistic faultcategorystatistic) {
		return faultcategorystatisticMapper.findMonth(faultcategorystatistic);
	}

	/**
	 * 分类、地市对应次数
	 * @param faultcategorystatistic
	 * @return
	 */
	public List<Faultcategorystatistic> findCityData(Faultcategorystatistic faultcategorystatistic) {
		//例如结束日期是2019-10，则查询时改为2019-10-31 23:59:59，即要拿出10月的数据
		if("2".equals(faultcategorystatistic.getTimeFlag())) {
			Calendar nextMonth = Calendar.getInstance();
			nextMonth.setTime(faultcategorystatistic.getEndCreateDate());
			nextMonth.add(Calendar.MONTH, 1);
			nextMonth.add(Calendar.SECOND, -1);
			faultcategorystatistic.setEndCreateDate(nextMonth.getTime());
		}
		return faultcategorystatisticMapper.findCityData(faultcategorystatistic);
	}
}