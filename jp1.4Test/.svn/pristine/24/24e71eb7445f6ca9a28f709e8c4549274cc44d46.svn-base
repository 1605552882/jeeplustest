/**
 * Copyright &copy; 2015-2020 <a href="http://www.jeeplus.org/">JeePlus</a> All rights reserved.
 */
package com.jeeplus.modules.documentdetect.web;

import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.ConstraintViolationException;

import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.jeeplus.common.config.Global;
import com.jeeplus.common.json.AjaxJson;
import com.jeeplus.common.utils.DateUtils;
import com.jeeplus.common.utils.StringUtils;
import com.jeeplus.common.utils.excel.ExportExcel;
import com.jeeplus.common.utils.excel.ImportExcel;
import com.jeeplus.core.persistence.Page;
import com.jeeplus.core.web.BaseController;
import com.jeeplus.modules.checkresult.entity.Checkresult;
import com.jeeplus.modules.checkresult.service.CheckresultService;
import com.jeeplus.modules.documentdetect.entity.Documentarydetails;
import com.jeeplus.modules.documentdetect.service.DocumentarydetailsService;

/**
 * 工单详情Controller
 * @author liang
 * @version 2019-08-05
 */
@Controller
@RequestMapping(value = "${adminPath}/documentdetect/documentarydetails")
public class DocumentarydetailsController extends BaseController {

	@Autowired
	private DocumentarydetailsService documentarydetailsService;
	
	@Autowired
	private CheckresultService checkresultService;
	
	
	@ModelAttribute
	public Documentarydetails get(@RequestParam(required=false) String id) {
		Documentarydetails entity = null;
		if (StringUtils.isNotBlank(id)){
			entity = documentarydetailsService.get(id);
		}
		if (entity == null){
			entity = new Documentarydetails();
		}
		return entity;
	}
	@ResponseBody
	//@RequiresPermissions(value={"sys:menu:add","sys:menu:edit"},logical=Logical.OR)
	@RequestMapping(value = "getIdBySbillno")
	public AjaxJson getIdBySbillno(Documentarydetails documentarydetails, Model model, RedirectAttributes redirectAttributes) {
		AjaxJson j = new AjaxJson();
		Documentarydetails documentarydetail = documentarydetailsService.getIdBySbillno(documentarydetails.getSbillno());
		j.setSuccess(true);
		j.setMsg("保存成功!");
		j.put("documentarydetails", documentarydetail);
		return j;
	}
	
	/**
	 * 取样表单页面
	 */
	//@RequiresPermissions(value={"documentdetect:documentarydetails:view","documentdetect:documentarydetails:add","documentdetect:documentarydetails:edit"},logical=Logical.OR)
	@RequestMapping(value = "samplform")
	public String samplform(Documentarydetails documentarydetails, Model model) {
		//检查结论
		List<Checkresult>  checkresult = checkresultService.getBySbillno(documentarydetails.getSbillno());
		documentarydetails.setCheckresult(checkresult);
		
		model.addAttribute("documentarydetails", documentarydetails);
		if(StringUtils.isBlank(documentarydetails.getId())){//如果ID是空为添加
			model.addAttribute("isAdd", true);
		}
		return "modules/documentchoose/samplForm";
	}
	
	
	/**
	 * 工单详情页面列表页面
	 */
	//@RequiresPermissions("documentdetect:documentarydetails:list")
	@RequestMapping(value = {"list", ""})
	public String list() {
		return "modules/documentdetect/documentarydetailsList";
	}
	
		/**
	 * 工单详情页面列表数据
	 */
	@ResponseBody
	@RequestMapping(value = "data")
	public Map<String, Object> data(Documentarydetails documentarydetails, HttpServletRequest request, HttpServletResponse response, Model model) {
		Page<Documentarydetails> page = documentarydetailsService.findPage(new Page<Documentarydetails>(request, response), documentarydetails); 
		return getBootstrapData(page);
	}
	
	/**
	 * 根据故障种类和故障时间获取原始工单列表
	 */
	@ResponseBody
	@RequestMapping(value = "faultCategoryData")
	public Map<String, Object> faultCategoryData(Documentarydetails documentarydetails, 
			HttpServletRequest request, HttpServletResponse response, Model model) {
		Page<Documentarydetails> page = documentarydetailsService.findFaultCategoryDataPage(new Page<Documentarydetails>(request, response), documentarydetails); 
		return getBootstrapData(page);
	}
	
	

	/**
	 * 查看，增加，编辑工单详情页面表单页面
	 */
	//@RequiresPermissions(value={"documentdetect:documentarydetails:view","documentdetect:documentarydetails:add","documentdetect:documentarydetails:edit"},logical=Logical.OR)
	@RequestMapping(value = "form")
	public String form(Documentarydetails documentarydetails, Model model) {
		model.addAttribute("documentarydetails", documentarydetails);
		if(StringUtils.isBlank(documentarydetails.getId())){//如果ID是空为添加
			model.addAttribute("isAdd", true);
		}
		return "modules/documentdetect/documentarydetailsForm";
	}

	/**
	 * 保存工单详情页面
	 */
	@RequestMapping(value = "save")
	public String save(Documentarydetails documentarydetails, Model model, RedirectAttributes redirectAttributes) throws Exception{
		Checkresult checkresult = new Checkresult();
		checkresultService.save(checkresult);
		
		//新增或编辑表单保存
		documentarydetailsService.save(documentarydetails);//保存
		addMessage(redirectAttributes, "保存工单详情页面成功");
		return "redirect:"+Global.getAdminPath()+"/documentdetect/documentarydetails/?repage";
	}

	/**
	 * 导入Excel数据

	 */
    @RequestMapping(value = "import", method=RequestMethod.POST)
    public String importFile(MultipartFile file, RedirectAttributes redirectAttributes) {
		try {
			int successNum = 0;
			int failureNum = 0;
			StringBuilder failureMsg = new StringBuilder();
			ImportExcel ei = new ImportExcel(file, 1, 0);
			List<Documentarydetails> list = ei.getDataList(Documentarydetails.class);
			for (Documentarydetails documentarydetails : list){
				try{
					documentarydetailsService.save(documentarydetails);
					successNum++;
				}catch(ConstraintViolationException ex){
					failureNum++;
				}catch (Exception ex) {
					failureNum++;
				}
			}
			if (failureNum>0){
				failureMsg.insert(0, "，失败 "+failureNum+" 条工单详情页面记录。");
			}
			addMessage(redirectAttributes, "已成功导入 "+successNum+" 条工单详情页面记录"+failureMsg);
		} catch (Exception e) {
			addMessage(redirectAttributes, "导入工单详情页面失败！失败信息："+e.getMessage());
		}
		return "redirect:"+Global.getAdminPath()+"/documentdetect/documentarydetails/?repage";
    }
    
	/**
	 * 导出excel文件
	 */
	@ResponseBody
	@RequiresPermissions("documentdetect:documentarydetails:export")
    @RequestMapping(value = "export", method=RequestMethod.POST)
    public AjaxJson exportFile(Documentarydetails documentarydetails, HttpServletRequest request, HttpServletResponse response, RedirectAttributes redirectAttributes) {
		AjaxJson j = new AjaxJson();
		try {
            String fileName = "工单详情"+DateUtils.getDate("yyyyMMddHHmmss")+".xlsx";
            Page<Documentarydetails> page = documentarydetailsService.findPage(new Page<Documentarydetails>(request, response, -1), documentarydetails);
    		new ExportExcel("工单详情", Documentarydetails.class).setDataList(page.getList()).write(response, fileName).dispose();
    		j.setSuccess(true);
    		j.setMsg("导出成功！");
    		return j;
		} catch (Exception e) {
			j.setSuccess(false);
			j.setMsg("导出工单详情记录失败！失败信息："+e.getMessage());
		}
			return j;
    }
	
}